## A special matrix is created ny the name makeCacheMatrix.

makeCacheMatrix <- function(x = matrix()) {
    inv <- NULL
    set <- function(y) {
      x<<- y
      inv <<- NULL
    }
    
    
    get <- function() x
    setInverse <- function(inverse) inv <<- inverse
    getInverse <- function() inv
    list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}


## This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. 
## If the inverse has already been calculated (and the matrix has not changed), then the cachesolve 
## should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
inv <- x$getInverse()   ## return amatrix that is the inverse of x
  if(!is.null(inv)) {
    message("getting cached data")
    return(inv)
  }
  
  mat1 <- x$get()
  inv <- solve(mat1, ...)
  x$setInverse(inv)
  inv
}
